{% extends "AriiACKBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
function Init() {
    mySidebar.items('objects').setActive();

    myToolbar.loadStruct('{{ url('xml_ARII_toolbar') }}?refresh=1', function() {
        ToolbarTime();
    });

    myLayout = globalLayout.cells("c").attachLayout('2U');
    myLayout.cells("a").hideHeader();
    myLayout.cells("b").hideHeader();
    myLayout.cells("a").setWidth(400);

    myGrid = myLayout.cells("a").attachGrid();
    myGrid.setImagePath( "{{ asset('/images/') }}");
    myGrid.setHeader("{{ "Name" | trans }},{{ "Description" | trans }}");
    myGrid.attachHeader("#text_filter,#text_filter");
    myGrid.setInitWidths("140,*");
    myGrid.setColAlign("left,left");
    myGrid.setColTypes("ro,ro");
    myGrid.setColSorting("str,str");
    myGrid.enableAlterCss("even_row","odd_row");   
    myGrid.enableDragAndDrop(true);    
    myGrid.init();
    myGrid.load( "{{ url('xml_ACK_objects_grid') }}?state=OPEN" );
    myGrid.attachEvent("onRowDblClicked", function (rid) {
        EditEvent(rid);
    });
    myGrid.attachEvent("onDrag", function(sId,tId,sObj,tObj,sInd,tInd){
        changeState(sId,sObj,tObj);
    });
    
    formData = [
        { type: "settings", position: "label-left", labelWidth: 80, inputWidth: 350, labelAlign: "right", readonly: 1, position: "label-left" },
        { type: "hidden", name: 'id' },       
        {   type: "block",
            inputWidth: "auto",
            list: [    
                {type: "input", name: 'name', label:'{{ 'Name' | trans }}', required: true },
                {type: "input", name: 'title', label:'{{ 'Title' | trans }}' },
                {type: "input", name: 'description', label:'{{ 'Description' | trans }}', rows: 6 }                
            ]
        }
    ];
    myForm = myLayout.cells("b").attachForm(formData);
    
    myFormToolbar = myLayout.cells("b").attachToolbar();
    myFormToolbar.setIconsPath("{{ asset('/images/') }}");
    myFormToolbar.loadStruct("{{ url('xml_ACK_event_toolbar') }}");
    
    myFormToolbar.attachEvent("onClick", function(id){
        switch (id) {
            case 'delete':
                // On edite pour sauvegarder
                globalLayout.cells("b").progressOn();
                dhtmlx.confirm({
                 title: "{{ "Delete alert" | trans }}",
                 type: "confirm-error",
                 text: '{{ "Do you confirm the suppression ?" | trans }}',
                 callback: function(answer) { if (answer) {
                           myForm.send("{{ url('xml_ACK_event_delete') }}","POST",function(loader,response){
                           if(response === "success")
                           {
                             dhtmlx.message({
                                title:"{{ "Save" | trans }}",
                                type: "Notice",
                                lifetime: "60000",
                                text: "{{ "Alert deleted" | trans }}"
                             });
                           }
                           else 
                           {
                             dhtmlx.message({
                                title:"{{ "Delete" | trans }}",
                                type: "error",
                                lifetime: "60000",
                                text: response
                             });
                             globalLayout.cells("a").attachHTMLString(response);
                           }
                                myGrid.deleteRow(myForm.getItemValue('id'));
                                myForm.getItemValue('ID','');
                                globalLayout.cells("b").progressOff();
                            })
                    }
                },
                 cancel: "{{ "No" | trans }}",
                 ok: "{{ "Yes" | trans }}" });
                   break;
            case 'new':
            case 'add':
                myForm.clear();
                break;
            case "copy":
                myForm.setItemValue("id",'');
                dhtmlx.message({
                        title:"Copy",
                        type: "Notice",
                        lifetime: "60000",
                        text: "{{ "Copy" | trans }}"
                     });
                
                break;
            case 'save':
                globalLayout.progressOn();
                if(!myForm.validate())
                {
                    dhtmlx.message({
                        title:"Error",
                        type: "error",
                        lifetime: "60000",
                        text: "{{ "Please type in all the required fields!" | trans }}"
                     });
                    globalLayout.progressOff();
                    return;
                }
                myForm.send("{{ url('xml_ACK_event_save') }}","POST",function(loader,response){
                   if(response === "success")
                   {
                        dhtmlx.message({
                            title:"{{ "Save" | trans }}",
                            type: "Notice",
                            lifetime: "60000",              
                            text: "{{ "Saved" | trans }}"
                        });
                        myGrid.updateFromXML("{{ url('xml_ACK_alarms_grid') }}");
                   }
                   else 
                   {
                        dhtmlx.message({
                           title:"{{ "Save" | trans }}",
                           type: "alert-error",
                           lifetime: "60000",
                           width: "800px",
                           text: response
                        });
                   }
                   globalLayout.progressOff();
                });
                break;
            default:
                alert(id);
            }
    });
}

function PageRefresh() {
};

function ClickToolbar (itemid,state) {
    var id = itemid.split('_');    
    switch (id[0]) {
        case 'refresh':
            myGrid.updateFromXML("{{ url('xml_ACK_notifications_grid') }}");
            break;
        case 'EXPORT':
            switch (id[1]) {
                case 'xls':
                    alert("{{ url('xls_ACK_notifications') }}");
                    window.location.href= "{{ url('xls_ACK_notifications') }}";                
                    break;
                default:
                    alert(id);
            }
            break;
        default:
            alert(id);
        }
}
</script>
{% endblock %}